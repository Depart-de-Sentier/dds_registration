[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dds_registration"
authors = [
  { name="Germain CHAZOT", email="g.chazot@gmail.com" },
  { name="Chris Mutel", email="cmutel@gmail.com" },
  { name="Igor Mikheev", email="lilliputten@gmail.com" }
]
maintainers = [
  { name="Chris Mutel", email="cmutel@gmail.com" },
  { name="Igor Mikheev", email="lilliputten@gmail.com" }
]
description = "Django app for event dds_registration and billing "
readme = "README.md"
dynamic = ["version"]
# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Framework :: Django :: 5.0",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
]
requires-python = ">=3.10"
dependencies = [
    # dependencies as strings with quotes, e.g. "foo"
    # You can add version requirements like "foo>2.0"
    "django>=5.0",
    "django-timezone-field>=3.1",
    "django-compressor>=4.4",
    "django-livereload-server>=0.5.1",
    "django-preferences>=1.0.0",
    # "django-libsass>=0.9",  # DEPRECATED!
    # "django-crispy-forms~=1.8",
    "django-crispy-forms>=2.1",
    "crispy-bootstrap5>=2024.2",
]

[project.urls]
source = "https://github.com/Depart-de-Sentier/dds_registration"
homepage = "https://github.com/Depart-de-Sentier/dds_registration"
tracker = "https://github.com/Depart-de-Sentier/dds_registration/issues"

[project.optional-dependencies]
# Getting recursive dependencies to work is a pain, this
# seems to work, at least for now
testing = [
    "dds_registration",
    "pytest",
    "pytest-cov",
    "python-coveralls"
]
dev = [
    "build",
    "pre-commit",
    "pylint",
    "pytest",
    "pytest-cov",
    "pytest-randomly",
    "setuptools",
    "pyright>=1.1.353",
    "blue==0.9.1",
    "djlint==1.34.1",
]

[tool.blue]
line-length = 120
target-version = ['py37']
# include = '\.pyi?$'
exclude = [
  # "**/migrations",
  # ".venv",
  # ".git",
  # ".vscode",
  # "build",
  # "*.egg-info",
  # "*cache",
  # "static/CACHE",
  # "static/vendor",
  # "__pycache__",
  "node_modules",
]
include = [
  "core",
  "dds_registration",
]

[tool.setuptools]
license-files = ["LICENSE"]
include-package-data = true
packages = ["dds_registration"]

[tool.setuptools.dynamic]
version = {attr = "dds_registration.__version__"}

[tool.pytest.ini_options]
addopts = "--cov dds_registration --cov-report term-missing --verbose"
norecursedirs = [
    "dist",
    "build",
    ".tox"
]
testpaths = ["tests/*.py"]

[tool.flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = ["E203", "W503"]
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude = [
    ".tox",
    "build",
    "dist",
    ".eggs",
    "docs/conf.py",
]

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
